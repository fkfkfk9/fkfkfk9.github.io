{"componentChunkName":"component---src-templates-post-tsx","path":"/reactSetup.md/","result":{"data":{"markdownRemark":{"html":"<hr>\n<h1 id=\"리엑트-프로젝트-셋업방법\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%97%91%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%85%8B%EC%97%85%EB%B0%A9%EB%B2%95\" aria-label=\"리엑트 프로젝트 셋업방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리엑트 프로젝트 셋업방법</h1>\n<h2 id=\"create-react-app\" style=\"position:relative;\"><a href=\"#create-react-app\" aria-label=\"create react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create-react-app</h2>\n<p>create react app은 react를 배우기 위한 싱글 페이지 앱이다.<br>\n이 앱을 설치함으로써 개발환경 구축, 최신 JS를 사용가능하고 앱 최적화를 해준다.<br>\ncreate recat app 은 백 엔드 로직이나 DB를 제어할 수 없다.<br>\nbabel이나 webpack같은 빌드 도구를 사용하지만 설정 없이도 동작한다.<br>\nnpm run build 명령어만으로 쉽게 배포가 가능하다.<br>\n<a href=\"https://github.com/facebook/create-react-app#create-react-app-\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create react app Readme</a>\n우선 npx를 설치해 주는데 npx는 npm 5.2이상 버전의 패키지 실행 도구이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> npm i npx -g</code></pre></div>\n<p>설치한 npx로 create react app를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> npx create-react-app 프로젝트명</code></pre></div>\n<p>위의 명령어를 실행하면 실행한 경로에서 프로젝트명으로 폴더를 생성하여 리엑트 연습환경으로 셋팅을 해준다.</p>\n<hr>\n<h2 id=\"baseurl-설정\" style=\"position:relative;\"><a href=\"#baseurl-%EC%84%A4%EC%A0%95\" aria-label=\"baseurl 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>baseUrl 설정</h2>\n<p>jsconfig.json 파일을 package.json과 같은 경로에 생성하여 아래와 같이 생성해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에는 이 설정을 <code class=\"language-text\">.env</code>파일에 해주었다고 하는데 강제로 변경되었다고 한다.<br>\n여기서 설정해주는 <code class=\"language-text\">baseUrl</code>의 의미는 js파일에서 import를 할 경우 상대경로로 한다면 추후 매우 복잡하게 경로가 표시되는데 절대경로의 기준이 되는 폴더를 설정해주는 것이다.<br>\npackage.json 파일과 같은경로에 두는 이유는 src경로 밖에 있어야 하기 때문이다.</p>\n<hr>\n<h2 id=\"prop-types-설치\" style=\"position:relative;\"><a href=\"#prop-types-%EC%84%A4%EC%B9%98\" aria-label=\"prop types 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prop-types 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  npm install prop-types</code></pre></div>\n<p>위의 명령어를 이용해 prop-types을 설치해준다.\nprop-types는 컴포넌트에 들어온 값이 유효한 값인지 prop의 type를 미리 정의해준다. 이로인해 잘못된 입력을 막을 수 있다.</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm start</code></pre></div>\n<p>위의 명령어를 입력하면 리엑트 프로젝트가 localhost의 3000번 포트에서 실행된다.</p>\n<hr>\n<h2 id=\"react-router\" style=\"position:relative;\"><a href=\"#react-router\" aria-label=\"react router permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Router</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install react-router-dom</code></pre></div>\n<p>react-router-dom을 설치해준다.<br>\nReact Router는 react에서 사용하는 route 패키지로 dom이나 react native에서 사용 가능하다.<br>\nRoute의 JAVA기반의 웹페이지로 비교하면 컨트롤러와 비슷한 역할을 한다고 볼 수 있다.\n리엑트는 위에서 설명한것처럼 싱글 페이지 앱(SPA)으로 url입력시 매번 새로고침 되면서 모든 페이지를 호출하는것이 아니라 Router를 사용하여 변경된 소스만 바꿔주도록 되어있어 부드럽고 빠르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> exact component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Home<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/tv\"</span> exact component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">TV</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/search\"</span> exact component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Search<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Redirect <span class=\"token keyword\">from</span><span class=\"token operator\">=</span><span class=\"token string\">\"*\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Router를 사용할 경우 위와같은 코드를 짤 수 있는데 URL과 매칭되는 Path 값에 따라 컴포넌트를 연결해준다.<br>\n즉 사용자가 URL로 요청을 하면 Router에서 이를 제어해준다.\nRouter중 많이 사용되는것이 2가지 있는데 BrowserRouter, HashRouter 이다.<br>\nHashRouter는 배포가 쉽고 새로고침을 해도 에러가 나지 않지만 검색엔진이 찾지 못하고 주소에 #이 붙어 불편하다.<br>\nBrowserRouter는 새로고침시 에러가 발생하는 문제가 있지만 검색엔진이 찾을 수 있고 HTML5 history API를 활용할 수 있으며 동적인 페이지에서 유용하다.</p>\n<hr>\n<h2 id=\"switch\" style=\"position:relative;\"><a href=\"#switch\" aria-label=\"switch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>switch</h2>\n<p>위의 코드를 보면 Switch가 있는걸 볼 수 있다.\nSwitch의 역할은 path를 통해 1가지 이상의 경로가 같이들어올때의 문제를 해결한다.<br>\n예를들어 요청하지 않은 url을 호출할 경우를 대비해 예외처리 페이지를 만들었다면 없는 url을 입력했을때 해당 페이지만 처리되어야 한다.<br>\n하지만 모든 url은 /를 포함하게 되어있고 이는 메인페이지 이기 때문에 둘이 같이 출력되게 되어있다.<br>\n이럴때 Switch를 사용하게 되면 첫번째로 매칭되는 path의 컴포넌트만 호출하기 때문에 정상적으로 처리가 가능하다.\n이 외에도 위에 표시된것처럼 exact를 사용하게 되면 정확하게 일치하는 path만 호출하도록 하는것도 가능하다.</p>\n<hr>\n<h2 id=\"react에서의-css\" style=\"position:relative;\"><a href=\"#react%EC%97%90%EC%84%9C%EC%9D%98-css\" aria-label=\"react에서의 css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React에서의 CSS</h2>\n<p>리엑트에서 CSS는 일반적인 HTML에서와 같은방식의 작업도 가능은 하지만 컴포넌트별로 관리하는 리엑트에서 글로벌하게 사용하는 일반적인 css사용은 하지않는것이 좋다.<br>\ncreate-react-app은 local 스코프에서 css를 동작시키도록 module.css를 지원하는데 파일명.module.css로 만들어주면 된다. 이 방법으로 css를 작성한다면 js파일에서 css파일을 import하여 변수처럼 css한 내용을 부여할 수 있다.\n또 다른 방식은 styled-components를 사용하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install styled-components</code></pre></div>\n<p>위의 명령어로 설치해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> List <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>ul<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  display: flex;\n  list-style-type: none;\n  justify-content: space-around;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ReactLink <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Link<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  text-decoration: none;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>header<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>List<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ReactLink to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>Movies<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ReactLink<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ReactLink href<span class=\"token operator\">=</span><span class=\"token string\">\"/tv\"</span><span class=\"token operator\">></span><span class=\"token constant\">TV</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ReactLink<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ReactLink href<span class=\"token operator\">=</span><span class=\"token string\">\"/search\"</span><span class=\"token operator\">></span>Search<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ReactLink<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>List<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드가 styled-components 사용하여 작성한 css이다.\nstyled를 import하고 변수에 styled.ul변수로 선언한 css문을 넣어주고 기존의 ul태그를 변수명 List로 변경한다.\nLink처럼 react router에서 제공하는 태그는 <code class=\"language-text\">(Link)</code>로 호출할 수 있다.\nstyled-components 사용함으로써 완벽하게 로컬에서만 사용되면서도 아예 js파일 안에서 같이 작성까지 할 수 있다.<br>\ncss파일을 나누고 class이름을 지어서 파일을 옮겨다니면서 맞춰주는 이런 귀찮은 작업들이 없어지기 때문에 굉장히 편하게 작업할 수 있다.\n하지만 css가 생겨난것 자체가 재사용성을 늘리기 위해서 인데 로컬에서만 관리한다면 html에 style로 작업하는것과 다를것이 없기 때문에 글로벌하게 설정하는것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install styled-reset</code></pre></div>\n<p>styled-reset을 설치해주는데 reset만 봐도 알 수 있듯이 html에 모든 태그들의 기본값들을 초기화 시켜주는것이다. 참고로 reset를 하는 이유는 브라우저마다 태그의 기본값들이 미세하게 다르기 때문에 표준을 지키기가 힘들다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createGlobalStyle <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> reset <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"styled-reset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> globalStyles <span class=\"token operator\">=</span> createGlobalStyle<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>reset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n    a{\n        text-decoration:none;\n        color:inherit;\n    }\n    *{\n        box-sizing:border-box;\n    }\n    body{\n        font-size:13px;\n        background-color:rgba(20,20,20,1);\n    }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> globalStyles<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위에 코드처럼 global 스코프에서 사용할 css들을 정리해주고 이를 App.js에 라우터 아래에 넣어준다면 App.js에서 호출되는 모든 코드들은 모두 위의 스타일이 자동으로 적용될것이다.</p>\n<hr>\n<h2 id=\"axios\" style=\"position:relative;\"><a href=\"#axios\" aria-label=\"axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Axios</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install axios</code></pre></div>\n<p>위의 명령어로 설치가 가능하다.<br>\naxios는 HTTP 통신의 요구사항을 컴팩트한 패키지로써 사용하기 쉽게 설계 되었다.<br>\nAxios의 인스턴스를 설정 해줄 수 있다는 점에서 좋다.<br>\n우리는 Axios 인스턴스에 baseURL, timeout, headers 같이 여러곳에서 반복되는 것들을 한번만 정의해서 여러곳에서 사용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> axios <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.themoviedb.org/3/\"</span><span class=\"token punctuation\">,</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    api_key<span class=\"token operator\">:</span> <span class=\"token string\">\"apikey를 입력해준다.\"</span><span class=\"token punctuation\">,</span>\n    language<span class=\"token operator\">:</span> <span class=\"token string\">\"en-US\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> api<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위는 axios를 사용하는 코드인데 자주 사용할 api를 미리 정의해놓는 것이다.\napi에서 데이터를 호출할때마다 url부터 api키를 다 입력해줘야 한다면 매우 비효율적이기 때문에 axios를 이용하여 한번만 정의하고 axios 인스턴스를 호출하여 사용하면 된다.</p>\n<hr>\n<p><a href=\"https://github.com/fkfkfk999/react_app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">셋팅하면서 작성한 코드 링크</a></p>","excerpt":"리엑트 프로젝트 셋업방법 create-react-app create react app은 react를 배우기 위한 싱글 페이지 앱이다. 이 앱을 설치함으로써 개발환경 구축, 최신 JS를 사용가능하고 앱 최적화를 해준다. create recat app …","tableOfContents":"<ul>\n<li>\n<p><a href=\"/reactSetup.md/#%EB%A6%AC%EC%97%91%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%85%8B%EC%97%85%EB%B0%A9%EB%B2%95\">리엑트 프로젝트 셋업방법</a></p>\n<ul>\n<li><a href=\"/reactSetup.md/#create-react-app\">create-react-app</a></li>\n<li><a href=\"/reactSetup.md/#baseurl-%EC%84%A4%EC%A0%95\">baseUrl 설정</a></li>\n<li><a href=\"/reactSetup.md/#prop-types-%EC%84%A4%EC%B9%98\">prop-types 설치</a></li>\n<li><a href=\"/reactSetup.md/#react-router\">React Router</a></li>\n<li><a href=\"/reactSetup.md/#switch\">switch</a></li>\n<li><a href=\"/reactSetup.md/#react%EC%97%90%EC%84%9C%EC%9D%98-css\">React에서의 CSS</a></li>\n<li><a href=\"/reactSetup.md/#axios\">Axios</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/reactSetup.md/"},"frontmatter":{"title":"리엑트 프로젝트 셋업방법","date":"May 12, 2021","tags":["react","javascript"],"keywords":["fkfkfk9 Learn CODE","fkfkfk9"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/reactSetup.md/","series":[],"lastmod":"2021-05-12"}},"staticQueryHashes":["2027115977","694178885"]}